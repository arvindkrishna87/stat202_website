{
  "hash": "9abf042182389f2c6aa79e33132f6796",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling <br> Chapter 3.0 - 3.3\"\ninstitute: \"Department of Statistics and Data Science <br> STAT 202\"\n\nlogo: nu_logo.png\nformat: \n  revealjs:\n    theme: [default, nu_theme.scss]\n    chalkboard:\n      theme: whiteboard\n      toggleNotesButton: false\n    menu:\n        side: right\n    code-line-numbers: false\n\nexecute:\n  message: false\n  warning: false\n  echo: true\n---\n\n\n\n\n## Today's goals {background-image=\"images_horst/dplyr_wrangling.png\" background-size=\"400px\" background-opacity=\"50%\" background-position=\"85% 50%\"}\n\n<br/>\n\n::: columns\n::: {.column width=\"60%\"}\n1.  Understand the pipe operator\n2.  Subset rows of a dataset based on conditions\n3.  Calculate summary statistics of a variable\n:::\n:::\n\n::: {.absolute top=\"77%\" left=\"85%\" width=\"500\"}\n::: {style=\"opacity:0.75; font-size: 0.5em\"}\nArtwork by @allison_horst\n:::\n:::\n\n## Data Wrangling\n\nIn real data applications it is rare that data will be in the \"perfect\" form for us to use. We will typically need to manipulate or wrangle data into a form that is useful using the `dplyr` library.\n\n-   The pipe operator `%>%` : takes the output of one function and passes it into another function as an argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  step 1 %>% \n  step 2\n```\n:::\n\n\n## filter()\n\n-   `filter()` is used to subset a data frame, retaining all **rows** that satisfy your conditions.\n\nOperators for the `filter` Function\n\n::: columns\n::: {.column width=\"50%\"}\n| **Operator** | **Definition**           |\n|--------------|--------------------------|\n| `==`         | equal                    |\n| `>`          | greater than             |\n| `>=`         | greater than or equal to |\n:::\n\n::: {.column width=\"50%\"}\n| **Operator** | **Definition**        |\n|--------------|-----------------------|\n| `!=`         | not equal             |\n| `<`          | less than             |\n| `<=`         | less than or equal to |\n:::\n:::\n\n## Example 1 {auto-animate=\"true\"}\n\nConsider the `penguins` dataset.\n\nSubset the dataset to only include 'male' penguins.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(            )\n```\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse~\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ~\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ~\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186~\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ~\n$ sex               <fct> male, female, female, NA, female, male, female, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n```\n:::\n:::\n\n:::\n\n## Example 1 {auto-animate=\"true\"}\n\nConsider the `penguins` dataset.\n\nSubset the dataset to only include 'male' penguins.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(sex == \"male\")\n```\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse~\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ~\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ~\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186~\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ~\n$ sex               <fct> male, female, female, NA, female, male, female, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n```\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\nRemember to store your data with a new meaningful name.\n:::\n\n## Example 1 {auto-animate=\"true\"}\n\nConsider the `penguins` dataset.\n\nSubset the dataset to only include 'male' penguins.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_male <- penguins %>% \n  filter(sex == \"male\")\n```\n:::\n\n\n## New Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins_male)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 168\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse~\n$ bill_length_mm    <dbl> 39.1, 39.3, 39.2, 38.6, 34.6, 42.5, 46.0, 37.7, 38.2~\n$ bill_depth_mm     <dbl> 18.7, 20.6, 19.6, 21.2, 21.1, 20.7, 21.5, 18.7, 18.1~\n$ flipper_length_mm <int> 181, 190, 195, 191, 198, 197, 194, 180, 185, 180, 18~\n$ body_mass_g       <int> 3750, 3650, 4675, 3800, 4400, 4500, 4200, 3600, 3950~\n$ sex               <fct> male, male, male, male, male, male, male, male, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n```\n:::\n:::\n\n:::\n\n<br>\n\nRemember to store your data with a new meaningful name.\n\n## Example 2 {.smaller auto-animate=\"true\"}\n\nSubset the dataset to only include 'male' penguins that weigh more than 4000 grams.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_male <- penguins %>% \n  filter(sex == \"male\")\n```\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse~\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ~\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ~\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186~\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ~\n$ sex               <fct> male, female, female, NA, female, male, female, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n```\n:::\n:::\n\n:::\n\n## Example 2 {.smaller auto-animate=\"true\"}\n\nSubset the dataset to only include 'male' penguins that weigh more than 4000 grams.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_heavy_m <- penguins %>% \n  filter(sex == \"male\", body_mass_g > 4000)\n```\n:::\n\n\n## Alternate Code\n\n**and** can be represented by either a comma **,** or the **&** symbol\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_heavy_m <- penguins %>% \n  filter(sex == \"male\" & body_mass_g > 4000)\n```\n:::\n\n\n<br>\n\nNote: Since we already created an only males dataset you could have started with that and proceeded to filter based on weight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_heavy_m <- penguins_male %>% \n  filter(body_mass_g > 4000)\n```\n:::\n\n\n## New Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins_heavy_m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 109\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Dream, D~\n$ bill_length_mm    <dbl> 39.2, 34.6, 42.5, 46.0, 39.2, 39.8, 44.1, 39.6, 42.3~\n$ bill_depth_mm     <dbl> 19.6, 21.1, 20.7, 21.5, 21.1, 19.1, 19.7, 18.8, 21.2~\n$ flipper_length_mm <int> 195, 198, 197, 194, 196, 184, 196, 190, 191, 188, 20~\n$ body_mass_g       <int> 4675, 4400, 4500, 4200, 4150, 4650, 4400, 4600, 4150~\n$ sex               <fct> male, male, male, male, male, male, male, male, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n```\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\nALWAYS inspect your new dataset to make sure everything is as expected.\n:::\n\n## summarize()\n\n`summarize()` function reduces a data frame to a summary of just the specified variable.\n\n<br>\n\n**Useful summary statistics**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sumamry <- data %>% \n  summarize(mean = mean(variable),\n            median = median(variable),\n            sd = sd(variable),\n            iqr = IQR(variable),\n            count = n())\n```\n:::\n\n\n## Example 3 {.scrollable auto-animate=\"true\"}\n\nConsider the `penguins` dataset.\n\n<font size=\"6\">Summarize the average `flipper_length_mm` and count for penguins that are either \"Adelie\" `species` or \"Gentoo\" `species`. \nWhich of the following is correct?</font>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a)\npenguins_summary_a <- penguins %>% \n  filter(species == \"Adelie\" | \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() )\n# b)\npenguins_summary_b <- penguins %>% \n  filter(species == \"Adelie\" | species == \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() )\n#c)\npenguins_summary_c <- penguins %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() ) %>% \n  filter(species == \"Adelie\" & species == \"Gentoo\")\n#d)\npenguins_summary_d <- penguins %>% \n  filter(species == \"Adelie\" & species == \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n(flipper_length_mm) )\n```\n:::\n\n\n<br>\n\n\n## Example 3 {.scrollable auto-animate=\"true\"}\n\nConsider the `penguins` dataset.\n\n<font size=\"6\">Summarize the average `flipper_length_mm` and count for penguins that are either \"Adelie\" `species` or \"Gentoo\" `species`. \nWhich of the following is correct?</font>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6-10\"}\n# a)\npenguins_summary_a <- penguins %>% \n  filter(species == \"Adelie\" | \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() )\n# b)\npenguins_summary_b <- penguins %>% \n  filter(species == \"Adelie\" | species == \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() )\n#c)\npenguins_summary_c <- penguins %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n(flipper_length_mm) ) %>% \n  filter(species == \"Adelie\" | species == \"Gentoo\")\n#d)\npenguins_summary_d <- penguins %>% \n  filter(species == \"Adelie\" & species == \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() )\n```\n:::\n\n\n\n## Example 3 (continued) {auto-animate=\"true\"}\n\nPrint the data summary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_summary_b <- penguins %>% \n  filter(species == \"Adelie\" | species == \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm),\n            count = n() )\npenguins_summary_b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n   mean count\n  <dbl> <int>\n1    NA   276\n```\n:::\n:::\n\n\n\n\n## Example 3 (continued) {auto-animate=\"true\"}\n\nPrint the data summary.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\npenguins_summary_b <- penguins %>% \n  filter(species == \"Adelie\" | species == \"Gentoo\") %>% \n  summarize(mean = mean(flipper_length_mm, na.rm = TRUE),\n            count = n() )\npenguins_summary_b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n   mean count\n  <dbl> <int>\n1  202.   276\n```\n:::\n:::\n\n\n## Important information\n\n- Order of pipe operations matters!\n-   If you are using `&` and `|` in the same filter be very careful and use parenthesis.\n-   Missing data is entered as `NA` in a data frame cell and can produce an error when using `summarize` unless you set na.rm=TRUE (ie: remove the NA values).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}