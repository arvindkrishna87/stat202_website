{
  "hash": "b3d1e8c791011f67c3c41ef9dfbaeaef",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling <br> Chapter 3.4 - 3.9\"\ninstitute: \"Department of Statistics and Data Science <br> STAT 202\"\n\nlogo: nu_logo.png\nformat: \n  revealjs:\n    theme: [default, nu_theme.scss]\n    chalkboard:\n      theme: whiteboard\n      toggleNotesButton: false\n    menu:\n        side: right\n    code-line-numbers: false\n\nexecute:\n  message: false\n  warning: false\n  echo: true\n---\n\n\n\n\n## Today's goals {background-image=\"images_horst/dplyr_mutate.png\" background-size=\"400px\" background-opacity=\"50%\" background-position=\"85% 50%\"}\n\n<br/>\n\n::: columns\n::: {.column width=\"60%\"}\n1.  More piping!\n2.  group data based on variables\n3.  create a new variable using mutate\n4.  subset a dataset based on columns\n5.  arrange data in both ascending and descending order\n:::\n:::\n\n::: {.absolute top=\"77%\" left=\"85%\" width=\"500\"}\n::: {style=\"opacity:0.75; font-size: 0.5em\"}\nArtwork by @allison_horst\n:::\n:::\n\n## Data Wrangling\n\nIn conjunction with past tools (`filter()` and `summarize()`) we will use:\n\n-   `group_by()`\n-   `mutate()`\n-   `arrange()`\n-   `select()`\n-   and a few others.\n\nRarely do we only use one of these tools in isolation. We \"pipe\" them together to wrangle data.\n\n## `group_by()`\n\n`group_by(variable)` takes an existing data frame and converts it into a grouped data frame\n\n-   operations are performed by group\n-   must be used in conjunction with another operator, Ex: summarize()\n-   can group by multiple criteria but must be included in the **same** function call\n\n## Example: `group_by()` {.scrollable}\n\nCalculate the average body mass of penguins by species.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  group_by(species) %>% \n  summarize(mean_mass = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  species   mean_mass\n  <fct>         <dbl>\n1 Adelie        3701.\n2 Chinstrap     3733.\n3 Gentoo        5076.\n```\n:::\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 8\n  species island    bill_length_mm bill_depth_mm flipper_l~1 body_~2 sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema~  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema~  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema~  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# ... with abbreviated variable names 1: flipper_length_mm, 2: body_mass_g\n```\n:::\n:::\n\n:::\n\n::: fragment\nCalculate the average body mass of male and female penguins for each species. (ie: calculate the average body mass of penguins by species and sex.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  group_by(species, sex) %>% \n  summarize(mean_mass = mean(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 3\n# Groups:   species [3]\n  species   sex    mean_mass\n  <fct>     <fct>      <dbl>\n1 Adelie    female     3369.\n2 Adelie    male       4043.\n3 Adelie    <NA>         NA \n4 Chinstrap female     3527.\n5 Chinstrap male       3939.\n6 Gentoo    female     4680.\n7 Gentoo    male       5485.\n8 Gentoo    <NA>         NA \n```\n:::\n:::\n\n:::\n\n## `mutate()` {.scrollable}\n\n`mutate( )` create a new variable (in the **same** dataset)\n\n**Example:**\n\nCreate a new variable `body_mass_lb` where we calculate the penguins weight in pounds. Hint: $pounds \\approx grams/453.6$\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>%\n  mutate(body_mass_lb = body_mass_g/453.6)\n```\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 9\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel~\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse~\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, ~\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, ~\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186~\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, ~\n$ sex               <fct> male, female, female, NA, female, male, female, male~\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007~\n$ body_mass_lb      <dbl> 8.267196, 8.377425, 7.164903, NA, 7.605820, 8.046737~\n```\n:::\n:::\n\n:::\n\nNotice we overwrote the `penguins` dataset. You can ONLY overwrite the original data if you are **not changing** any of the original information. Otherwise store it as something NEW.\n\n## `arrange()` {.scrollable}\n\n-   `arrange(variable)` sorts data in ascending (low to high; A to Z) order by default.\\\n-   `arrange(desc(variable))` sorts data in descending (high to low; Z to A) order.\n\n**Example:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  arrange(desc(body_mass_g))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 x 9\n   species island bill_length_mm bill_dept~1 flipp~2 body_~3 sex    year body_~4\n   <fct>   <fct>           <dbl>       <dbl>   <int>   <int> <fct> <int>   <dbl>\n 1 Gentoo  Biscoe           49.2        15.2     221    6300 male   2007    13.9\n 2 Gentoo  Biscoe           59.6        17       230    6050 male   2007    13.3\n 3 Gentoo  Biscoe           51.1        16.3     220    6000 male   2008    13.2\n 4 Gentoo  Biscoe           48.8        16.2     222    6000 male   2009    13.2\n 5 Gentoo  Biscoe           45.2        16.4     223    5950 male   2008    13.1\n 6 Gentoo  Biscoe           49.8        15.9     229    5950 male   2009    13.1\n 7 Gentoo  Biscoe           48.4        14.6     213    5850 male   2007    12.9\n 8 Gentoo  Biscoe           49.3        15.7     217    5850 male   2007    12.9\n 9 Gentoo  Biscoe           55.1        16       230    5850 male   2009    12.9\n10 Gentoo  Biscoe           49.5        16.2     229    5800 male   2008    12.8\n# ... with 334 more rows, and abbreviated variable names 1: bill_depth_mm,\n#   2: flipper_length_mm, 3: body_mass_g, 4: body_mass_lb\n```\n:::\n:::\n\n\n## `select()`\n\n`select()` subsets the dataset based on named columns\n\n<font size=\"6\">Sometimes datasets contain a LOT of information that you do not need for your analysis. `select()` will help us simplify the dataset and make it easier to use.</font>\n\nIn the penguins dataset, say we are only interested in the body measurement columns.\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_body <- penguins %>% \n  select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)\n```\n:::\n\n\n## Alternate Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify variables to remove\npenguins_body <- penguins %>% \n  select(-species, -island, -sex, -year)\n# same thing different notation\npenguins_body <- penguins %>% \n  select(-c(species, island, sex, year) )\n```\n:::\n\n\n## Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins_body)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g body_mass_lb\n           <dbl>         <dbl>             <int>       <int>        <dbl>\n1           39.1          18.7               181        3750         8.27\n2           39.5          17.4               186        3800         8.38\n3           40.3          18                 195        3250         7.16\n4           NA            NA                  NA          NA        NA   \n5           36.7          19.3               193        3450         7.61\n6           39.3          20.6               190        3650         8.05\n```\n:::\n:::\n\n:::\n\n## Other Useful Data Wrangling Functions\n\n-   `count(variable)` : shortcut to `group_by %>% summarize(n())`\n-   `top_n(n = 1, variable)` : return the largest value\n-   `top_n(n = -1, variable)` : return the smallest value\n\n## Data Wrangling Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(!is.na(sex)) %>% \n  group_by(species) %>% \n  summarize(count = n()) %>% \n  arrange(count)\n```\n:::\n\n\n**We can read this as**: take `penguins`, then keep only observations that are not missing, and then group by species, and then calculate the summary statistics per species, and then order the dataset according to our chosen variable count.\n",
    "supporting": [
      "lec06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}