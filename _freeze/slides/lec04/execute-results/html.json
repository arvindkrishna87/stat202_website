{
  "hash": "5b491cba0e1732be61bac3cfaff9bcfe",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization <br> Sections 2.7 - 2.9\"\ninstitute: \"Department of Statistics and Data Science <br> STAT 202\"\n\nlogo: nu_logo.png\nformat: \n  revealjs:\n    theme: [default, nu_theme.scss]\n    chalkboard:\n      theme: whiteboard\n      toggleNotesButton: false\n    menu:\n        side: right\n    code-line-numbers: false\n\nexecute:\n  message: false\n  warning: false\n  echo: true\n---\n\n\n\n\n## Today's goals {background-image=\"images_horst/r_first_then.png\" background-size=\"400px\" background-opacity=\"50%\" background-position=\"80% 50%\"}\n\n<br/>\n\n::: columns\n::: {.column width=\"60%\"}\n1.  Create a boxplot\n2.  Create a barplot\n3.  Properly describe a boxplot and barplot\n4.  Display barplots in various ways by category\n:::\n:::\n\n::: {.absolute top=\"85%\" left=\"80%\" width=\"500\"}\n::: {style=\"opacity:0.75; font-size: 0.5em\"}\nArtwork by @allison_horst\n:::\n:::\n\n## 5NG#4: Boxplots\n\n<font size=\"6\">\n\n-   A boxplot is used to visualize the **distribution** of a single **numerical** variable.\n\n. . .\n\n-   Grouped boxplots are particularly useful for comparing the distribution of a numerical variable across a **categorical** variable. ie: shows the relationship between a numerical and a categorical variable. </font>\n\n<br>\n\n. . .\n\n**Boxplot syntax in R:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data= my_data, aes(x = (optional categorical variable),  y = var1)) +\n  geom_boxplot()\n```\n:::\n\n\nIf you switch x and y, it will just change the orientation of the boxplot (personal preference).\n\n## 5NG#4: Boxplots\n\n::: columns\n::: {.column width=\"40%\"}\n<img src=\"images_lecture/box_plot.png\" style=\"float: left;\"/>\n:::\n\n::: {.column width=\"60%\"}\nThere are 3 things that we typically focus on and describe/compare when inspecting a boxplot:\n\n-   center\n-   spread\n-   shape and outliers\n:::\n:::\n\n## Binary Variables {.scrollable}\n\n::: {.absolute top=\"0%\" left=\"90%\" width=\"100\"}\n![](www/participate_icon.png)\n:::\n\n<font size=\"6\"> Consider the `titanic` dataset, which contains information about passengers on the titanic. If a passenger survived, then the variable `Survived = 1`. </font>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitanic %>% \n  select(PassengerId, Survived, Sex) %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 418\nColumns: 3\n$ PassengerId <dbl> 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903~\n$ Survived    <dbl> 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1~\n$ Sex         <chr> \"male\", \"female\", \"male\", \"male\", \"female\", \"male\", \"femal~\n```\n:::\n:::\n\n\n. . .\n\n<font size=\"6\"> Is `Survived` a categorical or numerical variable?\n\n. . .\n\n`R` will read in numerical columns as \"numbers\" even though these numbers are supposed to represent \"categories\".\n\n. . .\n\nTo fix this we need to use the `factor()` function.\n\nTyping `factor(Survived)` would turn the variable into a \"factor\". </font>\n\n## 5NG#5: Barplots\n\nA barplot is used to visualize the distribution (frequencies) of a single categorical variable.\n\n. . .\n\n-   `geom_bar()` is used when we have the raw data and counting how many observations are in each category has to be done (list not yet counted).\n\n. . .\n\n-   `geom_col()` is used when we directly have counts of each category in our dataset (pre-counted).\n\n. . .\n\n**Barplot syntax in R:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data= my_data, aes(x = var1)) +\n  geom_bar()\n```\n:::\n\n\n## 5NG#5: Barplots continued\n\nWhen describing a barplot we look for...\n\n::: incremental\n-   Disparities in the height of the bars.\n-   Bar with the most observations.\n-   Bar with the least observations.\n-   If all the bars are about equal height, then the distribution is uniform.\n:::\n\n## Example 1: Barplots {.scrollable .smaller}\n\n::: {.absolute top=\"0%\" left=\"90%\" width=\"100\"}\n![](www/participate_icon.png)\n:::\n\nConsider the Palmer Penguins dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 8\n  species island    bill_length_mm bill_depth_mm flipper_l~1 body_~2 sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema~  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema~  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema~  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# ... with abbreviated variable names 1: flipper_length_mm, 2: body_mass_g\n```\n:::\n:::\n\n\nWe are interested in plotting the distribution of `species`.\n\nAre we using `geom_bar()` or `geom_col()`?\n\n<br>\n\n::: fragment\nWhat would pre-counted data look like?\n\n::: panel-tabset\n## Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_counted\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_counted <- penguins %>% \n  count(species)\n```\n:::\n\n:::\n:::\n\n## Example 2: Barplots {.scrollable .smaller}\n\nWhat if we want to visualize the distribution of `sex` in each of the `species`. There are 4 main ways to visualize multiple levels within a categorical data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=penguins, aes(x = species, fill = sex)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](lec04_files/figure-revealjs/cat-barplot-1.png){width=50%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=penguins, aes(x = species, fill = sex)) +\n  geom_bar(position = \"fill\") +\n  ylab(\"proportion\")\n```\n\n::: {.cell-output-display}\n![](lec04_files/figure-revealjs/proportion-barplot-1.png){width=50%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=penguins, aes(x = species, fill = sex)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](lec04_files/figure-revealjs/side-by-side-barplot-1.png){width=50%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=penguins, aes(x = species))+\n  geom_bar() +\n  facet_wrap(~ sex)\n```\n\n::: {.cell-output-display}\n![](lec04_files/figure-revealjs/faceted-barplot-1.png){width=50%}\n:::\n:::\n\n\n## Extra information and resources {.scrollable}\n\n**\"factor\" vs \"character\" variable**\n\n-   factor has predefined levels and the observation must be one of those levels (limited response options).\n-   character can take on any string value (think open response options)\n-   [Factors in R](https://www.stat.berkeley.edu/~s133/factors.html)\n",
    "supporting": [
      "lec04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}