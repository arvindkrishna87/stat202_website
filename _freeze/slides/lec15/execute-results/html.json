{
  "hash": "089db20d4d2048c60a0ea597bd9378cd",
  "result": {
    "markdown": "---\ntitle: \"Repeated Sampling <br> Section 9.2 - 9.4\"\ninstitute: \"Department of Statistics and Data Science <br> STAT 202\"\n\nlogo: nu_logo.png\nformat: \n  revealjs:\n    theme: [default, nu_theme.scss]\n    chalkboard:\n      theme: whiteboard\n      toggleNotesButton: false\n    menu:\n        side: right\n    code-line-numbers: false\n    scrollable: true\n\nexecute:\n  message: false\n  warning: false\n  echo: true\n---\n\n\n## Overview and Definitions\n\nThe theory of **repeated samples** makes it possible for statisticians to take a random sample from a population and use to make inference about that population's parameters.\n\n-   **Repeated Sampling**: repeating the exact same random sampling procedure many times.\n\n-   **Sampling variability**: some sample estimates are bigger and some smaller than the true population statistic\n\n## More Definitions\n\n-   **Standard error**: the standard deviation of a sampling distribution\n-   **Sampling Distribution**: a probability distribution of a statistic (mean, proportion, or variation) obtained from repeated sampling. This distribution is visualized with a histogram.\n\n## Simulations in R\n\nThe theory of repeated samples is quite straight forward:\n\n1.  Imagine repeating the exact same *random sampling* procedure where you sampled 50 people from the population, say 10,000 times.\\\n2.  For each of the 10,000 samples, each with 50 people in them, calculate a sample statistic, say the sample mean. That is, you now have 10,000 sample means.\n\n## Simulations in R continued\n\n3.  Now examine the distribution of the 10,000 sample means. This distribution of sample means is know as a sampling distribution. A distribution that is the result of repeated sampling.\n\n**Code in R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_data <- data %>% \n  rep_sample_n(size = 50, reps = 10000)\n```\n:::\n\n\n## Describing a Sampling Distribution\n\n<center>![](images/lecture_images/describe_histogram.PNG)</center>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}