---
title: "Regression <br> Chapter 5.0 - 5.1"
institute: "Department of Statistics and Data Science <br> STAT 202"
logo: "www/nu_logo.png"
format: 
  revealjs:
    theme: [default, nu_theme.scss]
    chalkboard:
      theme: whiteboard
      toggleNotesButton: false
    menu:
        side: right
    code-line-numbers: false
execute:
  message: false
  warning: false
  echo: true
editor_options: 
  
  chunk_output_type: console
server: shiny
---

```{r}
#| include: false
library(tidyverse)
library(shiny)
library(palmerpenguins)

penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))
```


## Today's goals {background-image="www/tidydata_5.png" background-size="600px" background-opacity="70%" background-position="95% 50%"}

<br/>

::: columns
::: {.column width="60%"}
1.  Find the correlation between two variables
2.  Build and interpret a linear regression model
3.  Make predictions using a linear regression model
4.  Plot the line of best fit on a scatterplot
:::
:::


::: {.absolute top="72%" left="85%" width="500"}
::: {style="opacity:0.75; font-size: 0.5em"}
Artwork by @allison_horst
:::
:::

## A Note about Regression

<br>

Remember that, BEFORE building a model, you should conduct an **exploratory data analysis**. 

<br>

You will almost certainly need to do some data wrangling and visualizations before the model analysis.

<br>

For this lessons example we will be using a subset of the `penguins` dataset that only includes `male` penguins from the `Chinstrap` species and `Dream` island. This is stored in `penguin_sub`.

## Correlation Coefficient {.scrollable}

**Correlation coefficient**: a number between -1 and 1 indicating the strength of the linear relationship between two numerical variables.

<br>

Match the following graphs with the most appropriate correlation coefficient:

:::{.fragment}
1.     a) -0.2     b) 0     c) 0.4     d) 0.7

![](www/cor_0.4.png)
:::


:::{.fragment}
2.     a) -1     b) -0.75     c) -0.9     d) 1

![](www/cor_-1.png)
:::

:::{.fragment}
3. Distance traveled vs the amount of gas in the car.

a) Exactly -1     b) Between -1 and 0     c) About 0 

d) Between 0 and 1     e) Exactly 1

:::


## Correlation Coefficient (continued){.scrollable}

The following code shows three different options for calculating the correlation between two variables within the `penguins` dataset.


::: panel-tabset

## Correlation

```{r cor}
#| echo: true
#| eval: false
# Option 1
penguin_sub %>%
  select(flipper_length_mm, body_mass_g) %>% 
  cor()
# Option 2
penguin_sub %>%
    summarize(cor = cor(flipper_length_mm, body_mass_g) )
# Option 3
cor(penguins$flipper_length_mm, penguins$body_mass_g)
```


## Data: penguin_sub

```{r}
penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))

glimpse(penguin_sub)
```
:::

:::{.fragment}
You will most likely need to filter out missing data beforehand OR set `use = "complete.obs"` inside the `cor()` function. This is the equivalent of when we set `na.rm = TRUE` in other summary functions.
:::

## Simple Linear Regression (SLR)

-   **Definition**: Simple linear regression: models the relationship between a response (y) variable and one explanatory (x) variable.

-   Essentially, we are finding the **line of best fit** for a scatterplot between 'x' and 'y'.

## SLR (continued)

**Equation** of a regression line:
$$\hat{y} = b_0 + b_1*x$$

<br>

-   $b_0$ : intercept; the **expected** value of $\hat{y}$ when $x = 0$

-   $b_1$ : slope; for every 1 unit increase in x, then $\hat{y}$ increases **on average** by $b_1$ 

-   **fitted values**: $\hat{y}$; the predicted value on the regression line

-   **residuals**: $y - \hat{y}$; error in prediction

## Example 1: Model {auto-animate="true"}

Consider a subset of the `penguins` dataset that only includes `male` penguins from the `Chinstrap` species and `Dream` island. This is stored in `penguin_sub`.

::: panel-tabset

## Model

Predict a penguin's `body_mass_g` using `flipper_length_mm`.

```{r}
#| echo: true
#Build a model
model_penguin <- lm(body_mass_g ~ flipper_length_mm, data = penguin_sub)

```

## Data: penguin_sub

```{r}
penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream")%>% 
  mutate(id = seq(1:34))

glimpse(penguin_sub)
```
:::

## Example 1: Model {auto-animate="true" .scrollable}

Consider a subset of the `penguins` dataset that only includes `male` penguins from the `Chinstrap` species and `Dream` island. This is stored in `penguin_sub`.

::: panel-tabset

## Model

Predict a penguin's `body_mass_g` using `flipper_length_mm`.

```{r}
#| echo: true
#Build a model

model_penguin <- lm(body_mass_g ~ flipper_length_mm, data = penguin_sub)

#Summarize the model
summary(model_penguin)

```

## Data: penguin_sub

```{r}
penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))

glimpse(penguin_sub)
```
:::

## Example 1: Plot regression line

::: panel-tabset

## Plot
```{r}
#| echo: true
# Plot relationship of variables
ggplot(penguin_sub, aes(x = flipper_length_mm, y = body_mass_g))+
    geom_point()
```


## Model

```{r}
#| echo: true
summary(model_penguin)$coefficients
```
:::

## Example 1: Plot regression line {.scrollable}


::: panel-tabset

## Plot

```{r}
#| echo: true
#| code-line-numbers: "4"
# Add line of best fit
ggplot(penguin_sub, aes(x = flipper_length_mm, y = body_mass_g))+
    geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

## Model

```{r}
#| echo: true
summary(model_penguin)$coefficients
```
:::


## Example 1: Residuals {.scrollable}


::: panel-tabset

## Visualizing

```{r}
#| panel: sidebar
#| echo: false
selectInput("pick1", "Pick a penguin:", 
            choices = penguin_sub$id)
br()

p("Observed weight (y):")
span(textOutput("obs"),
     style="color:#009E73")

br()

p("Predicted weight (fitted value):")
span(textOutput("pred"),
     style="color:red")

br()

p("Residual (error):")
span(textOutput("error"),
     style="color:#E69F00")

```

```{r}
#| panel: fill
#| echo: false
plotOutput("Ex1Plot")
```


```{r}
#| context: server
library(palmerpenguins)
library(tidyverse)


  penguin_sub <- penguins %>% 
  filter(sex == "male", species == "Chinstrap", island == "Dream") %>% 
  mutate(id = seq(1:34))

    model_penguin <- lm(body_mass_g ~ flipper_length_mm, data = penguin_sub)

    penguin_sub <- penguin_sub %>% 
  mutate(fitted_val = fitted(model_penguin),
         residual_val = residuals(model_penguin))
    
output$obs <- renderText({
  one_peng <- penguin_sub %>% 
    filter(id == input$pick1)
  
  return(round(one_peng$body_mass_g,1))
})

output$pred <- renderText({
  one_peng <- penguin_sub %>% 
    filter(id == input$pick1)
  
  return(round(one_peng$fitted_val,1))
})


output$error <- renderText({
  one_peng <- penguin_sub %>% 
    filter(id == input$pick1)
  
  paste0(round(one_peng$body_mass_g), " - ", round(one_peng$fitted_val,1), " = ", round( round(one_peng$body_mass_g)-round(one_peng$fitted_val,1), 1) )
})
    
output$Ex1Plot <- renderPlot({
  

  one_peng <- penguin_sub %>% 
    filter(id == input$pick1)
  
  
  ggplot(penguin_sub, 
         aes(x = flipper_length_mm, 
             y = body_mass_g))+
    geom_point(color = "#999999") +
    geom_point(data = one_peng, 
               color = "#009E73", size =4) +
    annotate("text", label = "y",
             x = one_peng$flipper_length_mm-0.5,
             y = one_peng$body_mass_g,
             color = "#009E73",
             size =4) +
    geom_point(data = one_peng, 
               aes(y = fitted_val), 
               color = "red", size = 4)+
    annotate("text", label = expression(hat("y")),
             x = one_peng$flipper_length_mm-0.5,
             y = one_peng$fitted_val,
             color = "red",
             size = 4) +
    geom_segment(data = one_peng, 
                 aes(x =flipper_length_mm,
                     xend = flipper_length_mm,
                     y = fitted_val,
                     yend = body_mass_g),
                 color = "#E69F00",
                 size =2)+
    scale_y_continuous(
      breaks = seq(3250, 4750, 250))+
    scale_x_continuous(
      breaks = seq(186, 214, 2))+
  geom_smooth(method = "lm", se = FALSE) +
    theme_minimal()
  
})
```

## Calculating

Predict a penguin's `body_mass_g` using `flipper_length_mm`.

```{r}
#| echo: true
penguin_sub <- penguin_sub %>% 
  mutate(fitted = fitted(model_penguin),
         residuals = residuals(model_penguin))

glimpse(penguin_sub)
```

:::

## Example 1: Predicting

Recall the equation of the regression line is 

$$\widehat{\hbox{body_mass_g} } = -4111.3 + 40.3*\hbox{flipper_length}$$

<br>

You find a new `male` penguin from the `Chinstrap` species and `Dream` island that has a flipper length of 220 mm. What do you predict his weight to be in grams?

:::{.fragment}
```{r}
-4111.3 + 40.3*220
```
:::

